name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  call-build:
    uses: kitao/pyxel/.github/workflows/build.yml@main
    with:
      checkout-ref: ${{ github.event.inputs.checkout-ref }}

  create-release:
    runs-on: ubuntu-latest
    needs: call-build
    steps:
    - uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref_name }}
        draft: true
        prerelease: true

  release-artifacts:
    runs-on: ubuntu-latest
    needs: create-release
    steps:
    - uses: actions/download-artifact@v2
      with:
        name: pyxel-wheel
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: pyxel-windows-zip
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: pyxel-windows-exe
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: pyxel-macos-zip
        path: dist
    - uses: actions/download-artifact@v2
      with:
        name: pyxel-linux-zip
        path: dist
    - uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const path = require('path');
          const fs = require('fs');
          const asset_dir = 'dist'
          const release_id = '${{ needs.create_release.outputs.id }}';
          for (let file of await fs.readdirSync(asset_dir)) {
            console.log('uploadReleaseAsset', file);
            await github.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: release_id,
              name: file,
              data: await fs.readFileSync(`${asset_dir}/${file}`)
            });
          }
